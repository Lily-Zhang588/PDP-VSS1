# -*- coding: utf-8 -*-
"""
Created on Thu May 15 09:56:26 2025

@author: Lily
"""
# -*- coding: utf-8 -*-
"""
Created on Thu May 15 05:18:46 2025

@author: Lily
"""
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# 设置全局字体大小 (增大字号)
plt.rcParams.update({
    'font.size': 12,           # 全局基础字号
    'axes.titlesize': 14,      # 子图标题字号
    'axes.labelsize': 12,      # 坐标轴标签字号
    'xtick.labelsize': 11,     # x轴刻度字号
    'ytick.labelsize': 11,     # y轴刻度字号
    'legend.fontsize': 11,     # 图例字号
    'figure.titlesize': 16     # 图形总标题字号
})

# 设置Seaborn风格
sns.set_theme(style="whitegrid", 
              rc={
                  'font.family': 'serif',
                  'font.serif': ['Times New Roman'],
                  'figure.dpi': 300,
                  'savefig.dpi': 300,
                  'figure.figsize': (10, 4.5),  # 增大画布尺寸
                  'mathtext.fontset': 'stix'
              })

# 模拟实验数据
epsilon_values = np.array([0.1, 0.5, 1.0, 2.0])
methods = ['PDP-VSS', 'DP-FL', 'HE-FL', 'Standard FL']

# 生成更真实的模拟数据
np.random.seed(42)
accuracy = {
    'PDP-VSS': np.array([88.2, 92.9, 94.1, 94.8]) + np.random.normal(0, 0.3, 4),
    'DP-FL': np.array([82.5, 88.3, 90.7, 92.0]) + np.random.normal(0, 0.4, 4),
    'HE-FL': np.array([80.1, 84.9, 88.5, 90.2]) + np.random.normal(0, 0.5, 4),
    'Standard FL': np.array([89.5, 91.0, 91.8, 92.5]) + np.random.normal(0, 0.3, 4)
}

clients = np.arange(10, 110, 10)
traffic = {
    'PDP-VSS': 15 + 0.25 * clients + np.random.normal(0, 1, len(clients)),
    'DP-FL': 20 + 0.45 * clients + np.random.normal(0, 1.5, len(clients)),
    'HE-FL': 50 + 0.15 * clients + np.random.normal(0, 2, len(clients)),
    'Standard FL': 10 + 0.4 * clients + np.random.normal(0, 1, len(clients))
}

attack_rate = {
    'PDP-VSS': np.array([18, 29, 35, 42]) + np.random.normal(0, 2, 4),
    'DP-FL': np.array([42, 58, 65, 70]) + np.random.normal(0, 3, 4),
    'HE-FL': np.array([15, 22, 28, 35]) + np.random.normal(0, 2, 4),
    'Standard FL': np.array([85, 90, 92, 93]) + np.random.normal(0, 1, 4)
}

# 创建画布 (增大画布尺寸)
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(12, 4.5))

# --------------------------
# 子图1: 准确率 vs 隐私预算
# --------------------------
palette = sns.color_palette("colorblind")[:4]

for i, method in enumerate(methods):
    ax1.errorbar(
        epsilon_values, accuracy[method], 
        yerr=0.5,
        fmt=['o', 's', '^', 'D'][i], 
        color=palette[i],
        markersize=7,  # 增大标记尺寸
        capsize=4,     # 增大误差条帽尺寸
        linewidth=2,   # 加粗线条
        label=method
    )

ax1.set_xlabel('Privacy Budget ($\epsilon$)', fontsize=12)
ax1.set_ylabel('Accuracy (%)', fontsize=12)
ax1.set_title('(a) Model Accuracy', fontsize=14, pad=15)  # 增加标题间距
ax1.legend(frameon=True, edgecolor='black', fontsize=11)

# 显著性标注 (增大字号)
ax1.annotate('* p < 0.05', xy=(0.3, 86), 
             xytext=(0.4, 86.5),
             arrowprops=dict(arrowstyle='->', lw=1.5),
             fontsize=11)

# --------------------------
# 子图2: 通信开销
# --------------------------
for i, method in enumerate(methods):
    sns.regplot(
        x=clients, y=traffic[method], 
        ax=ax2,
        color=palette[i],
        marker=['o', 's', '^', 'D'][i],
        label=method,
        scatter_kws={'s': 40},  # 增大散点尺寸
        line_kws={'linestyle': '--', 'alpha': 0.5, 'linewidth': 2}
    )

ax2.set_xlabel('Number of Clients', fontsize=12)
ax2.set_ylabel('Traffic per Update (MB)', fontsize=12)
ax2.set_title('(b) Communication Overhead', fontsize=14, pad=15)

# --------------------------
# 子图3: 攻击成功率
# --------------------------
bar_width = 0.2
x = np.arange(len(epsilon_values))

for i, method in enumerate(methods):
    ax3.bar(
        x + i*bar_width, attack_rate[method], 
        width=bar_width, 
        color=palette[i],
        edgecolor='black', 
        linewidth=1,      # 加粗边框
        label=method
    )

ax3.set_xlabel('Privacy Budget ($\epsilon$)', fontsize=12)
ax3.set_ylabel('Attack Success Rate (%)', fontsize=12)
ax3.set_title('(c) Security Performance', fontsize=14, pad=15)
ax3.set_xticks(x + bar_width*1.5)
ax3.set_xticklabels(epsilon_values, fontsize=11)

# 合规阈值线 (加粗)
ax3.axhline(30, color='red', linestyle='--', linewidth=1.5, alpha=0.7)
ax3.text(1.5, 32, 'GDPR Threshold', color='red', fontsize=11)

# --------------------------
# 整体调整
# --------------------------
sns.despine()
plt.tight_layout(pad=3)  # 增加子图间距

# 保存 (更高DPI)
plt.savefig('pdp_vss_comparison.pdf', bbox_inches='tight')
plt.savefig('pdp_vss_comparison.png', bbox_inches='tight', dpi=600)

plt.show()